{"ast":null,"code":"var _jsxFileName = \"/Users/satoshinakamoto/Documents/intellimint-ai/intellimint-chat/intellimint-chat-new/src/components/LoaderHelper.js\",\n  _s = $RefreshSig$();\n// LoaderHelper.js\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoaderWrapper = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  margin-bottom: 10px;\n  width: 100%;\n`;\n_c = LoaderWrapper;\nconst SpinnerText = styled.div`\n  font-family: monospace;\n  font-size: 24px;\n  color: ${props => props.theme.colors.text};\n  opacity: 0.7;\n`;\n_c2 = SpinnerText;\nconst brailleSpinnerChars = ['⠋', '⠙', '⠹', '⠸', '⠼', '⠴', '⠦', '⠧', '⠇', '⠏'];\nconst SpinningLoader = () => {\n  _s();\n  const [spinnerChar, setSpinnerChar] = useState(brailleSpinnerChars[0]);\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setSpinnerChar(prevChar => {\n        const currentIndex = brailleSpinnerChars.indexOf(prevChar);\n        const nextIndex = (currentIndex + 1) % brailleSpinnerChars.length;\n        return brailleSpinnerChars[nextIndex];\n      });\n    }, 100);\n    return () => clearInterval(intervalId);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(LoaderWrapper, {\n    children: /*#__PURE__*/_jsxDEV(SpinnerText, {\n      children: [spinnerChar, \" AI is thinking...\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(SpinningLoader, \"J/Duf7qov4FWQNw/10BjEoBSELk=\");\n_c3 = SpinningLoader;\nexport default SpinningLoader;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"LoaderWrapper\");\n$RefreshReg$(_c2, \"SpinnerText\");\n$RefreshReg$(_c3, \"SpinningLoader\");","map":{"version":3,"names":["React","useState","useEffect","styled","jsxDEV","_jsxDEV","LoaderWrapper","div","_c","SpinnerText","props","theme","colors","text","_c2","brailleSpinnerChars","SpinningLoader","_s","spinnerChar","setSpinnerChar","intervalId","setInterval","prevChar","currentIndex","indexOf","nextIndex","length","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","_c3","$RefreshReg$"],"sources":["/Users/satoshinakamoto/Documents/intellimint-ai/intellimint-chat/intellimint-chat-new/src/components/LoaderHelper.js"],"sourcesContent":["// LoaderHelper.js\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\n\nconst LoaderWrapper = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  margin-bottom: 10px;\n  width: 100%;\n`;\n\nconst SpinnerText = styled.div`\n  font-family: monospace;\n  font-size: 24px;\n  color: ${props => props.theme.colors.text};\n  opacity: 0.7;\n`;\n\nconst brailleSpinnerChars = ['⠋', '⠙', '⠹', '⠸', '⠼', '⠴', '⠦', '⠧', '⠇', '⠏'];\n\nconst SpinningLoader = () => {\n  const [spinnerChar, setSpinnerChar] = useState(brailleSpinnerChars[0]);\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setSpinnerChar(prevChar => {\n        const currentIndex = brailleSpinnerChars.indexOf(prevChar);\n        const nextIndex = (currentIndex + 1) % brailleSpinnerChars.length;\n        return brailleSpinnerChars[nextIndex];\n      });\n    }, 100);\n\n    return () => clearInterval(intervalId);\n  }, []);\n\n  return (\n    <LoaderWrapper>\n      <SpinnerText>{spinnerChar} AI is thinking...</SpinnerText>\n    </LoaderWrapper>\n  );\n};\n\nexport default SpinningLoader;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,aAAa,GAAGH,MAAM,CAACI,GAAG;AAChC;AACA;AACA;AACA;AACA,CAAC;AAACC,EAAA,GALIF,aAAa;AAOnB,MAAMG,WAAW,GAAGN,MAAM,CAACI,GAAG;AAC9B;AACA;AACA,WAAWG,KAAK,IAAIA,KAAK,CAACC,KAAK,CAACC,MAAM,CAACC,IAAI;AAC3C;AACA,CAAC;AAACC,GAAA,GALIL,WAAW;AAOjB,MAAMM,mBAAmB,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;AAE9E,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGlB,QAAQ,CAACc,mBAAmB,CAAC,CAAC,CAAC,CAAC;EAEtEb,SAAS,CAAC,MAAM;IACd,MAAMkB,UAAU,GAAGC,WAAW,CAAC,MAAM;MACnCF,cAAc,CAACG,QAAQ,IAAI;QACzB,MAAMC,YAAY,GAAGR,mBAAmB,CAACS,OAAO,CAACF,QAAQ,CAAC;QAC1D,MAAMG,SAAS,GAAG,CAACF,YAAY,GAAG,CAAC,IAAIR,mBAAmB,CAACW,MAAM;QACjE,OAAOX,mBAAmB,CAACU,SAAS,CAAC;MACvC,CAAC,CAAC;IACJ,CAAC,EAAE,GAAG,CAAC;IAEP,OAAO,MAAME,aAAa,CAACP,UAAU,CAAC;EACxC,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEf,OAAA,CAACC,aAAa;IAAAsB,QAAA,eACZvB,OAAA,CAACI,WAAW;MAAAmB,QAAA,GAAEV,WAAW,EAAC,oBAAkB;IAAA;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAa;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7C,CAAC;AAEpB,CAAC;AAACf,EAAA,CApBID,cAAc;AAAAiB,GAAA,GAAdjB,cAAc;AAsBpB,eAAeA,cAAc;AAAC,IAAAR,EAAA,EAAAM,GAAA,EAAAmB,GAAA;AAAAC,YAAA,CAAA1B,EAAA;AAAA0B,YAAA,CAAApB,GAAA;AAAAoB,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}