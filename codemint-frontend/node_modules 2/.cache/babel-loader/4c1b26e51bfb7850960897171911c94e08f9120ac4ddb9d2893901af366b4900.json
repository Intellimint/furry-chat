{"ast":null,"code":"var _jsxFileName = \"/Users/satoshinakamoto/Documents/intellimint-ai/intellimint-chat/intellimint-chat-new/src/components/ChatWindow.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport MessageList from './MessageList';\nimport MessageInput from './MessageInput';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatWindowWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n`;\n_c = ChatWindowWrapper;\nconst MessagesWrapper = styled.div`\n  flex-grow: 1;\n  overflow-y: auto;\n  padding: 10px;\n  margin-bottom: 60px;  /* Added to ensure that the last message is fully visible above the input box */\n`;\n_c2 = MessagesWrapper;\nconst ChatWindow = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [sessionId, setSessionId] = useState(null);\n  const messagesEndRef = useRef(null);\n  const sendMessage = async content => {\n    try {\n      setMessages(prevMessages => [...prevMessages, {\n        role: 'user',\n        content\n      }]);\n      const response = await axios.post('http://localhost:8000/chat', {\n        session_id: sessionId,\n        message: content\n      });\n      setMessages(prevMessages => [...prevMessages, {\n        role: 'assistant',\n        content: response.data.message\n      }]);\n      setSessionId(response.data.session_id);\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setMessages(prevMessages => [...prevMessages, {\n        role: 'assistant',\n        content: 'Error: Could not send message'\n      }]);\n    }\n  };\n\n  // Auto-scroll to bottom when new messages are added\n  useEffect(() => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  }, [messages]);\n  return /*#__PURE__*/_jsxDEV(ChatWindowWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(MessagesWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(MessageList, {\n        messages: messages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n      onSendMessage: sendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatWindow, \"mD7dhKm3Ids5SqC3il2oFIZ9tpE=\");\n_c3 = ChatWindow;\nexport default ChatWindow;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"ChatWindowWrapper\");\n$RefreshReg$(_c2, \"MessagesWrapper\");\n$RefreshReg$(_c3, \"ChatWindow\");","map":{"version":3,"names":["React","useState","useEffect","useRef","styled","MessageList","MessageInput","axios","jsxDEV","_jsxDEV","ChatWindowWrapper","div","props","theme","colors","background","text","_c","MessagesWrapper","_c2","ChatWindow","_s","messages","setMessages","sessionId","setSessionId","messagesEndRef","sendMessage","content","prevMessages","role","response","post","session_id","message","data","error","console","current","scrollIntoView","behavior","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","onSendMessage","_c3","$RefreshReg$"],"sources":["/Users/satoshinakamoto/Documents/intellimint-ai/intellimint-chat/intellimint-chat-new/src/components/ChatWindow.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport MessageList from './MessageList';\nimport MessageInput from './MessageInput';\nimport axios from 'axios';\n\nconst ChatWindowWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n`;\n\nconst MessagesWrapper = styled.div`\n  flex-grow: 1;\n  overflow-y: auto;\n  padding: 10px;\n  margin-bottom: 60px;  /* Added to ensure that the last message is fully visible above the input box */\n`;\n\nconst ChatWindow = () => {\n  const [messages, setMessages] = useState([]);\n  const [sessionId, setSessionId] = useState(null);\n  const messagesEndRef = useRef(null);\n\n  const sendMessage = async (content) => {\n    try {\n      setMessages(prevMessages => [...prevMessages, { role: 'user', content }]);\n\n      const response = await axios.post('http://localhost:8000/chat', {\n        session_id: sessionId,\n        message: content\n      });\n\n      setMessages(prevMessages => [...prevMessages, { role: 'assistant', content: response.data.message }]);\n      setSessionId(response.data.session_id);\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setMessages(prevMessages => [...prevMessages, { role: 'assistant', content: 'Error: Could not send message' }]);\n    }\n  };\n\n  // Auto-scroll to bottom when new messages are added\n  useEffect(() => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, [messages]);\n\n  return (\n    <ChatWindowWrapper>\n      <MessagesWrapper>\n        <MessageList messages={messages} />\n        <div ref={messagesEndRef} /> {/* Scroll target to ensure visibility of the last message */}\n      </MessagesWrapper>\n      <MessageInput onSendMessage={sendMessage} />\n    </ChatWindowWrapper>\n  );\n};\n\nexport default ChatWindow;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}