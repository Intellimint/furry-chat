{"ast":null,"code":"var _jsxFileName = \"/Users/satoshinakamoto/Documents/intellimint-ai/intellimint-chat/intellimint-chat-new/src/components/MessageList.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, memo } from 'react';\nimport styled from 'styled-components';\nimport Prism from 'prismjs';\nimport 'prismjs/themes/prism-tomorrow.css';\nimport 'prismjs/components/prism-python';\nimport 'prismjs/components/prism-java';\nimport 'prismjs/components/prism-c';\nimport 'prismjs/components/prism-bash';\nimport 'prismjs/components/prism-javascript';\nimport 'prismjs/components/prism-jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageListContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: calc(100vh - 120px);\n  overflow-y: auto;\n  padding: 20px;\n`;\n_c = MessageListContainer;\nconst MessageWrapper = styled.div`\n  display: flex;\n  justify-content: ${props => props.isUser ? 'flex-end' : 'flex-start'};\n  margin-bottom: 10px;\n  width: 100%;\n`;\n_c2 = MessageWrapper;\nconst Message = styled.div`\n  background-color: ${props => props.isUser ? props.theme.colors.mutedGreen : props.theme.colors.primary};\n  color: ${props => props.theme.colors.text};\n  padding: 10px 15px;\n  border-radius: 20px;\n  max-width: 70%;\n  word-wrap: break-word;\n  overflow-wrap: break-word;\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);\n  line-height: 1.4;\n  font-size: 1rem;\n`;\n_c3 = Message;\nconst CodeBlockWrapper = styled.div`\n  max-width: 100%;\n  overflow-x: auto;\n  background-color: #2d2d2d;\n  border-radius: 4px;\n  margin: 10px 0;\n`;\n_c4 = CodeBlockWrapper;\nconst CodeBlock = styled.pre`\n  padding: 10px;\n  font-family: 'Fira code', 'Fira Mono', monospace;\n  font-size: 14px;\n  white-space: pre;\n  overflow-wrap: normal;\n  overflow-x: auto;\n`;\n_c5 = CodeBlock;\nconst MemoizedMessage = /*#__PURE__*/memo(_c6 = ({\n  content,\n  isUser\n}) => {\n  const formatContent = text => {\n    try {\n      const codeBlockRegex = /```(\\w+)?\\n([\\s\\S]*?)```/g;\n      const parts = [];\n      let lastIndex = 0;\n      let match;\n      while ((match = codeBlockRegex.exec(text)) !== null) {\n        if (match.index > lastIndex) {\n          parts.push(text.slice(lastIndex, match.index));\n        }\n        const language = match[1] || 'text';\n        const code = match[2].trim();\n        parts.push(/*#__PURE__*/_jsxDEV(CodeBlockWrapper, {\n          children: /*#__PURE__*/_jsxDEV(CodeBlock, {\n            className: `language-${language}`,\n            children: /*#__PURE__*/_jsxDEV(\"code\", {\n              children: Prism.languages[language] ? Prism.highlight(code, Prism.languages[language], language) : code\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this)\n        }, match.index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this));\n        lastIndex = match.index + match[0].length;\n      }\n      if (lastIndex < text.length) {\n        parts.push(text.slice(lastIndex));\n      }\n      return parts;\n    } catch (error) {\n      console.error('Error formatting content:', error);\n      return text;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(MessageWrapper, {\n    isUser: isUser,\n    children: /*#__PURE__*/_jsxDEV(Message, {\n      isUser: isUser,\n      children: formatContent(content)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n});\n_c7 = MemoizedMessage;\nconst MessageList = ({\n  messages\n}) => {\n  _s();\n  const messagesEndRef = useRef(null);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  useEffect(() => {\n    if (messages && messages.length) {\n      scrollToBottom();\n    }\n  }, [messages]);\n  if (!messages || !Array.isArray(messages)) {\n    console.error('Messages prop is invalid');\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(MessageListContainer, {\n    children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(MemoizedMessage, {\n      content: message.content || 'Message content unavailable',\n      isUser: message.role === 'user'\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: messagesEndRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n};\n_s(MessageList, \"0epSoi03NVSoD0I0FiLK4iVNXOA=\");\n_c8 = MessageList;\nexport default _c9 = /*#__PURE__*/memo(MessageList);\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9;\n$RefreshReg$(_c, \"MessageListContainer\");\n$RefreshReg$(_c2, \"MessageWrapper\");\n$RefreshReg$(_c3, \"Message\");\n$RefreshReg$(_c4, \"CodeBlockWrapper\");\n$RefreshReg$(_c5, \"CodeBlock\");\n$RefreshReg$(_c6, \"MemoizedMessage$memo\");\n$RefreshReg$(_c7, \"MemoizedMessage\");\n$RefreshReg$(_c8, \"MessageList\");\n$RefreshReg$(_c9, \"%default%\");","map":{"version":3,"names":["React","useRef","useEffect","memo","styled","Prism","jsxDEV","_jsxDEV","MessageListContainer","div","_c","MessageWrapper","props","isUser","_c2","Message","theme","colors","mutedGreen","primary","text","_c3","CodeBlockWrapper","_c4","CodeBlock","pre","_c5","MemoizedMessage","_c6","content","formatContent","codeBlockRegex","parts","lastIndex","match","exec","index","push","slice","language","code","trim","children","className","languages","highlight","fileName","_jsxFileName","lineNumber","columnNumber","length","error","console","_c7","MessageList","messages","_s","messagesEndRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","Array","isArray","map","message","role","ref","_c8","_c9","$RefreshReg$"],"sources":["/Users/satoshinakamoto/Documents/intellimint-ai/intellimint-chat/intellimint-chat-new/src/components/MessageList.js"],"sourcesContent":["import React, { useRef, useEffect, memo } from 'react';\nimport styled from 'styled-components';\nimport Prism from 'prismjs';\nimport 'prismjs/themes/prism-tomorrow.css';\nimport 'prismjs/components/prism-python';\nimport 'prismjs/components/prism-java';\nimport 'prismjs/components/prism-c';\nimport 'prismjs/components/prism-bash';\nimport 'prismjs/components/prism-javascript';\nimport 'prismjs/components/prism-jsx';\n\nconst MessageListContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: calc(100vh - 120px);\n  overflow-y: auto;\n  padding: 20px;\n`;\n\nconst MessageWrapper = styled.div`\n  display: flex;\n  justify-content: ${props => (props.isUser ? 'flex-end' : 'flex-start')};\n  margin-bottom: 10px;\n  width: 100%;\n`;\n\nconst Message = styled.div`\n  background-color: ${props => (props.isUser ? props.theme.colors.mutedGreen : props.theme.colors.primary)};\n  color: ${props => props.theme.colors.text};\n  padding: 10px 15px;\n  border-radius: 20px;\n  max-width: 70%;\n  word-wrap: break-word;\n  overflow-wrap: break-word;\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);\n  line-height: 1.4;\n  font-size: 1rem;\n`;\n\nconst CodeBlockWrapper = styled.div`\n  max-width: 100%;\n  overflow-x: auto;\n  background-color: #2d2d2d;\n  border-radius: 4px;\n  margin: 10px 0;\n`;\n\nconst CodeBlock = styled.pre`\n  padding: 10px;\n  font-family: 'Fira code', 'Fira Mono', monospace;\n  font-size: 14px;\n  white-space: pre;\n  overflow-wrap: normal;\n  overflow-x: auto;\n`;\n\nconst MemoizedMessage = memo(({ content, isUser }) => {\n  const formatContent = (text) => {\n    try {\n      const codeBlockRegex = /```(\\w+)?\\n([\\s\\S]*?)```/g;\n      const parts = [];\n      let lastIndex = 0;\n      let match;\n\n      while ((match = codeBlockRegex.exec(text)) !== null) {\n        if (match.index > lastIndex) {\n          parts.push(text.slice(lastIndex, match.index));\n        }\n        const language = match[1] || 'text';\n        const code = match[2].trim();\n        parts.push(\n          <CodeBlockWrapper key={match.index}>\n            <CodeBlock className={`language-${language}`}>\n              <code>\n                {Prism.languages[language]\n                  ? Prism.highlight(code, Prism.languages[language], language)\n                  : code}\n              </code>\n            </CodeBlock>\n          </CodeBlockWrapper>\n        );\n        lastIndex = match.index + match[0].length;\n      }\n\n      if (lastIndex < text.length) {\n        parts.push(text.slice(lastIndex));\n      }\n\n      return parts;\n    } catch (error) {\n      console.error('Error formatting content:', error);\n      return text;\n    }\n  };\n\n  return (\n    <MessageWrapper isUser={isUser}>\n      <Message isUser={isUser}>{formatContent(content)}</Message>\n    </MessageWrapper>\n  );\n});\n\nconst MessageList = ({ messages }) => {\n  const messagesEndRef = useRef(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    if (messages && messages.length) {\n      scrollToBottom();\n    }\n  }, [messages]);\n\n  if (!messages || !Array.isArray(messages)) {\n    console.error('Messages prop is invalid');\n    return null;\n  }\n\n  return (\n    <MessageListContainer>\n      {messages.map((message, index) => (\n        <MemoizedMessage\n          key={index}\n          content={message.content || 'Message content unavailable'}\n          isUser={message.role === 'user'}\n        />\n      ))}\n      <div ref={messagesEndRef} />\n    </MessageListContainer>\n  );\n};\n\nexport default memo(MessageList);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}