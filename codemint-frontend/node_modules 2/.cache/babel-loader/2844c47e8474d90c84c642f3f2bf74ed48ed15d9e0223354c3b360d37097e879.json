{"ast":null,"code":"var _jsxFileName = \"/Users/satoshinakamoto/Documents/intellimint-ai/intellimint-chat/intellimint-chat-new/src/components/MessageList.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useRef, useEffect, memo, useState } from 'react';\nimport styled from 'styled-components';\nimport Prism from 'prismjs';\nimport 'prismjs/themes/prism-tomorrow.css';\nimport 'prismjs/components/prism-python';\nimport 'prismjs/components/prism-java';\nimport 'prismjs/components/prism-c';\nimport 'prismjs/components/prism-bash';\nimport 'prismjs/components/prism-javascript';\nimport 'prismjs/components/prism-jsx';\n\n// Styled components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageListContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: calc(100vh - 60px);\n  overflow-y: auto;\n  padding: 20px;\n  max-width: 100%;\n  box-sizing: border-box;\n`;\n_c = MessageListContainer;\nconst MessageWrapper = styled.div`\n  display: flex;\n  justify-content: ${props => props.isUser ? 'flex-end' : 'flex-start'};\n  margin-bottom: 10px;\n  width: 100%;\n`;\n_c2 = MessageWrapper;\nconst Message = styled.div`\n  background-color: ${props => props.isUser ? props.theme.colors.mutedGreen : props.theme.colors.primary};\n  color: ${props => props.theme.colors.text};\n  padding: 10px 15px;\n  border-radius: 20px;\n  max-width: 80%;\n  word-wrap: break-word;\n  overflow-wrap: break-word;\n  white-space: pre-wrap;\n  box-sizing: border-box;\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);\n  line-height: 1.4;\n  font-size: 1rem;\n`;\n_c3 = Message;\nconst CodeBlockWrapper = styled.div`\n  position: relative;\n  margin-top: 10px;\n  margin-bottom: 10px;\n`;\n_c4 = CodeBlockWrapper;\nconst CodeBlock = styled.pre`\n  background-color: #2d2d2d;\n  border-radius: 4px;\n  padding: 10px 10px 10px 3.8em;\n  margin: 10px 0;\n  font-family: 'Fira code', 'Fira Mono', monospace;\n  font-size: 14px;\n  line-height: 1.4; /* Adjusted to avoid extra space */\n  white-space: pre;\n  word-break: normal;\n  overflow-wrap: normal;\n  max-width: 100%;\n  overflow-x: auto;\n  box-sizing: border-box;\n  counter-reset: line;\n\n  code {\n    display: block;\n    position: relative;\n    \n    &::before {\n      content: attr(data-line-number);\n      counter-increment: line;\n      position: absolute;\n      left: -3em;\n      width: 2.5em;\n      text-align: right;\n      color: rgba(255, 255, 255, 0.4);\n    }\n  }\n`;\n_c5 = CodeBlock;\nconst CopyButton = styled.button`\n  position: absolute;\n  top: 5px;\n  right: 5px;\n  background: transparent;\n  border: none;\n  color: #fff;\n  cursor: pointer;\n  font-size: 0.8rem;\n  padding: 5px;\n  opacity: 0.7;\n  transition: opacity 0.2s;\n\n  &:hover {\n    opacity: 1;\n  }\n`;\n_c6 = CopyButton;\nconst Header = styled.h3`\n  font-size: 1.2em;\n  margin-top: 20px; /* Add more spacing to prevent bunched up headers */\n  margin-bottom: 20px; /* Adjust margin-bottom for better spacing */\n  color: ${props => props.theme.colors.text};\n`;\n\n// MemoizedMessage Component\n_c7 = Header;\nconst MemoizedMessage = /*#__PURE__*/_s(/*#__PURE__*/memo(_c8 = _s(({\n  content,\n  isUser\n}) => {\n  _s();\n  const [copiedIndex, setCopiedIndex] = useState(null);\n  const copyToClipboard = (text, index) => {\n    navigator.clipboard.writeText(text).then(() => {\n      setCopiedIndex(index);\n      setTimeout(() => setCopiedIndex(null), 2000);\n    });\n  };\n  const formatContent = text => {\n    try {\n      const codeBlockRegex = /```(\\w+)?\\n([\\s\\S]*?)```/g;\n      const boldTextRegex = /\\*\\*(.*?)\\*\\*/g;\n      const headerRegex = /^### (.*)$/gm;\n      const parts = [];\n      let lastIndex = 0;\n      let match;\n      let codeBlockIndex = 0;\n\n      // Handle headers\n      const textWithHeaders = text.split(headerRegex).map((part, index) => {\n        if (index % 2 === 1) {\n          return /*#__PURE__*/_jsxDEV(Header, {\n            children: part\n          }, `header-${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 18\n          }, this);\n        }\n        return part;\n      });\n      textWithHeaders.forEach((part, index) => {\n        if (/*#__PURE__*/React.isValidElement(part)) {\n          parts.push(part);\n        } else {\n          // Handle code blocks\n          let lastCodeIndex = 0;\n          while ((match = codeBlockRegex.exec(part)) !== null) {\n            if (match.index > lastCodeIndex) {\n              const nonCodeBlockText = part.slice(lastCodeIndex, match.index);\n              // Handle bold text within non-code parts\n              const nonCodeWithBold = nonCodeBlockText.split(boldTextRegex).map((boldPart, boldIndex) => {\n                if (boldIndex % 2 === 1) {\n                  return /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: boldPart\n                  }, `bold-${boldIndex}`, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 149,\n                    columnNumber: 26\n                  }, this);\n                }\n                return boldPart;\n              });\n              parts.push(/*#__PURE__*/_jsxDEV(\"div\", {\n                children: nonCodeWithBold\n              }, `text-${index}-${lastCodeIndex}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 26\n              }, this));\n            }\n            const language = match[1] || 'text';\n            const code = match[2].trim();\n            const highlightedCode = Prism.languages[language] ? Prism.highlight(code, Prism.languages[language], language) : code;\n            parts.push(/*#__PURE__*/_jsxDEV(CodeBlockWrapper, {\n              children: [/*#__PURE__*/_jsxDEV(CopyButton, {\n                onClick: () => copyToClipboard(code, codeBlockIndex),\n                children: copiedIndex === codeBlockIndex ? \"âœ… Copied\" : \"ðŸ“‹ Copy\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(CodeBlock, {\n                children: /*#__PURE__*/_jsxDEV(\"code\", {\n                  dangerouslySetInnerHTML: {\n                    __html: highlightedCode\n                  },\n                  className: `language-${language}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 169,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 17\n              }, this)]\n            }, `code-${index}-${match.index}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 15\n            }, this));\n            lastCodeIndex = match.index + match[0].length;\n            codeBlockIndex++;\n          }\n\n          // Handle remaining text after last code block\n          if (lastCodeIndex < part.length) {\n            const remainingText = part.slice(lastCodeIndex);\n            const remainingWithBold = remainingText.split(boldTextRegex).map((boldPart, boldIndex) => {\n              if (boldIndex % 2 === 1) {\n                return /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: boldPart\n                }, `bold-${boldIndex}`, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 183,\n                  columnNumber: 24\n                }, this);\n              }\n              return boldPart;\n            });\n            parts.push(/*#__PURE__*/_jsxDEV(\"div\", {\n              children: remainingWithBold\n            }, `text-${index}-end`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 24\n            }, this));\n          }\n        }\n      });\n      return parts;\n    } catch (error) {\n      console.error('Error formatting content:', error);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 14\n      }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(MessageWrapper, {\n    isUser: isUser,\n    children: /*#__PURE__*/_jsxDEV(Message, {\n      isUser: isUser,\n      children: formatContent(content)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 200,\n    columnNumber: 5\n  }, this);\n}, \"vmguM15Tqrzn4pZ8KoXNjtu9s9w=\")), \"vmguM15Tqrzn4pZ8KoXNjtu9s9w=\");\n\n// MessageList Component\n_c9 = MemoizedMessage;\nconst MessageList = ({\n  messages\n}) => {\n  _s2();\n  const messagesEndRef = useRef(null);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  useEffect(() => {\n    if (messages && messages.length) {\n      scrollToBottom();\n    }\n  }, [messages]);\n  if (!messages || !Array.isArray(messages)) {\n    console.error('Messages prop is invalid');\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(MessageListContainer, {\n    children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(MemoizedMessage, {\n      content: message.content || 'Message content unavailable',\n      isUser: message.role === 'user'\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: messagesEndRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 226,\n    columnNumber: 5\n  }, this);\n};\n_s2(MessageList, \"0epSoi03NVSoD0I0FiLK4iVNXOA=\");\n_c10 = MessageList;\nexport default _c11 = /*#__PURE__*/memo(MessageList);\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11;\n$RefreshReg$(_c, \"MessageListContainer\");\n$RefreshReg$(_c2, \"MessageWrapper\");\n$RefreshReg$(_c3, \"Message\");\n$RefreshReg$(_c4, \"CodeBlockWrapper\");\n$RefreshReg$(_c5, \"CodeBlock\");\n$RefreshReg$(_c6, \"CopyButton\");\n$RefreshReg$(_c7, \"Header\");\n$RefreshReg$(_c8, \"MemoizedMessage$memo\");\n$RefreshReg$(_c9, \"MemoizedMessage\");\n$RefreshReg$(_c10, \"MessageList\");\n$RefreshReg$(_c11, \"%default%\");","map":{"version":3,"names":["React","useRef","useEffect","memo","useState","styled","Prism","jsxDEV","_jsxDEV","MessageListContainer","div","_c","MessageWrapper","props","isUser","_c2","Message","theme","colors","mutedGreen","primary","text","_c3","CodeBlockWrapper","_c4","CodeBlock","pre","_c5","CopyButton","button","_c6","Header","h3","_c7","MemoizedMessage","_s","_c8","content","copiedIndex","setCopiedIndex","copyToClipboard","index","navigator","clipboard","writeText","then","setTimeout","formatContent","codeBlockRegex","boldTextRegex","headerRegex","parts","lastIndex","match","codeBlockIndex","textWithHeaders","split","map","part","children","fileName","_jsxFileName","lineNumber","columnNumber","forEach","isValidElement","push","lastCodeIndex","exec","nonCodeBlockText","slice","nonCodeWithBold","boldPart","boldIndex","language","code","trim","highlightedCode","languages","highlight","onClick","dangerouslySetInnerHTML","__html","className","length","remainingText","remainingWithBold","error","console","_c9","MessageList","messages","_s2","messagesEndRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","Array","isArray","message","role","ref","_c10","_c11","$RefreshReg$"],"sources":["/Users/satoshinakamoto/Documents/intellimint-ai/intellimint-chat/intellimint-chat-new/src/components/MessageList.js"],"sourcesContent":["import React, { useRef, useEffect, memo, useState } from 'react';\nimport styled from 'styled-components';\nimport Prism from 'prismjs';\nimport 'prismjs/themes/prism-tomorrow.css';\nimport 'prismjs/components/prism-python';\nimport 'prismjs/components/prism-java';\nimport 'prismjs/components/prism-c';\nimport 'prismjs/components/prism-bash';\nimport 'prismjs/components/prism-javascript';\nimport 'prismjs/components/prism-jsx';\n\n// Styled components\nconst MessageListContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: calc(100vh - 60px);\n  overflow-y: auto;\n  padding: 20px;\n  max-width: 100%;\n  box-sizing: border-box;\n`;\n\nconst MessageWrapper = styled.div`\n  display: flex;\n  justify-content: ${props => (props.isUser ? 'flex-end' : 'flex-start')};\n  margin-bottom: 10px;\n  width: 100%;\n`;\n\nconst Message = styled.div`\n  background-color: ${props => (props.isUser ? props.theme.colors.mutedGreen : props.theme.colors.primary)};\n  color: ${props => props.theme.colors.text};\n  padding: 10px 15px;\n  border-radius: 20px;\n  max-width: 80%;\n  word-wrap: break-word;\n  overflow-wrap: break-word;\n  white-space: pre-wrap;\n  box-sizing: border-box;\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);\n  line-height: 1.4;\n  font-size: 1rem;\n`;\n\nconst CodeBlockWrapper = styled.div`\n  position: relative;\n  margin-top: 10px;\n  margin-bottom: 10px;\n`;\n\nconst CodeBlock = styled.pre`\n  background-color: #2d2d2d;\n  border-radius: 4px;\n  padding: 10px 10px 10px 3.8em;\n  margin: 10px 0;\n  font-family: 'Fira code', 'Fira Mono', monospace;\n  font-size: 14px;\n  line-height: 1.4; /* Adjusted to avoid extra space */\n  white-space: pre;\n  word-break: normal;\n  overflow-wrap: normal;\n  max-width: 100%;\n  overflow-x: auto;\n  box-sizing: border-box;\n  counter-reset: line;\n\n  code {\n    display: block;\n    position: relative;\n    \n    &::before {\n      content: attr(data-line-number);\n      counter-increment: line;\n      position: absolute;\n      left: -3em;\n      width: 2.5em;\n      text-align: right;\n      color: rgba(255, 255, 255, 0.4);\n    }\n  }\n`;\n\nconst CopyButton = styled.button`\n  position: absolute;\n  top: 5px;\n  right: 5px;\n  background: transparent;\n  border: none;\n  color: #fff;\n  cursor: pointer;\n  font-size: 0.8rem;\n  padding: 5px;\n  opacity: 0.7;\n  transition: opacity 0.2s;\n\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nconst Header = styled.h3`\n  font-size: 1.2em;\n  margin-top: 20px; /* Add more spacing to prevent bunched up headers */\n  margin-bottom: 20px; /* Adjust margin-bottom for better spacing */\n  color: ${props => props.theme.colors.text};\n`;\n\n// MemoizedMessage Component\nconst MemoizedMessage = memo(({ content, isUser }) => {\n  const [copiedIndex, setCopiedIndex] = useState(null);\n\n  const copyToClipboard = (text, index) => {\n    navigator.clipboard.writeText(text).then(() => {\n      setCopiedIndex(index);\n      setTimeout(() => setCopiedIndex(null), 2000);\n    });\n  };\n\n  const formatContent = (text) => {\n    try {\n      const codeBlockRegex = /```(\\w+)?\\n([\\s\\S]*?)```/g;\n      const boldTextRegex = /\\*\\*(.*?)\\*\\*/g;\n      const headerRegex = /^### (.*)$/gm;\n      const parts = [];\n      let lastIndex = 0;\n      let match;\n      let codeBlockIndex = 0;\n\n      // Handle headers\n      const textWithHeaders = text.split(headerRegex).map((part, index) => {\n        if (index % 2 === 1) {\n          return <Header key={`header-${index}`}>{part}</Header>;\n        }\n        return part;\n      });\n\n      textWithHeaders.forEach((part, index) => {\n        if (React.isValidElement(part)) {\n          parts.push(part);\n        } else {\n          // Handle code blocks\n          let lastCodeIndex = 0;\n          while ((match = codeBlockRegex.exec(part)) !== null) {\n            if (match.index > lastCodeIndex) {\n              const nonCodeBlockText = part.slice(lastCodeIndex, match.index);\n              // Handle bold text within non-code parts\n              const nonCodeWithBold = nonCodeBlockText.split(boldTextRegex).map((boldPart, boldIndex) => {\n                if (boldIndex % 2 === 1) {\n                  return <strong key={`bold-${boldIndex}`}>{boldPart}</strong>;\n                }\n                return boldPart;\n              });\n              parts.push(<div key={`text-${index}-${lastCodeIndex}`}>{nonCodeWithBold}</div>);\n            }\n\n            const language = match[1] || 'text';\n            const code = match[2].trim();\n\n            const highlightedCode = Prism.languages[language]\n              ? Prism.highlight(code, Prism.languages[language], language)\n              : code;\n\n            parts.push(\n              <CodeBlockWrapper key={`code-${index}-${match.index}`}>\n                <CopyButton onClick={() => copyToClipboard(code, codeBlockIndex)}>\n                  {copiedIndex === codeBlockIndex ? \"âœ… Copied\" : \"ðŸ“‹ Copy\"}\n                </CopyButton>\n                <CodeBlock>\n                  <code dangerouslySetInnerHTML={{ __html: highlightedCode }} className={`language-${language}`} />\n                </CodeBlock>\n              </CodeBlockWrapper>\n            );\n\n            lastCodeIndex = match.index + match[0].length;\n            codeBlockIndex++;\n          }\n\n          // Handle remaining text after last code block\n          if (lastCodeIndex < part.length) {\n            const remainingText = part.slice(lastCodeIndex);\n            const remainingWithBold = remainingText.split(boldTextRegex).map((boldPart, boldIndex) => {\n              if (boldIndex % 2 === 1) {\n                return <strong key={`bold-${boldIndex}`}>{boldPart}</strong>;\n              }\n              return boldPart;\n            });\n            parts.push(<div key={`text-${index}-end`}>{remainingWithBold}</div>);\n          }\n        }\n      });\n\n      return parts;\n    } catch (error) {\n      console.error('Error formatting content:', error);\n      return <div>{text}</div>;\n    }\n  };\n\n  return (\n    <MessageWrapper isUser={isUser}>\n      <Message isUser={isUser}>{formatContent(content)}</Message>\n    </MessageWrapper>\n  );\n});\n\n// MessageList Component\nconst MessageList = ({ messages }) => {\n  const messagesEndRef = useRef(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    if (messages && messages.length) {\n      scrollToBottom();\n    }\n  }, [messages]);\n\n  if (!messages || !Array.isArray(messages)) {\n    console.error('Messages prop is invalid');\n    return null;\n  }\n\n  return (\n    <MessageListContainer>\n      {messages.map((message, index) => (\n        <MemoizedMessage\n          key={index}\n          content={message.content || 'Message content unavailable'}\n          isUser={message.role === 'user'}\n        />\n      ))}\n      <div ref={messagesEndRef} />\n    </MessageListContainer>\n  );\n};\n\nexport default memo(MessageList);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}