{"ast":null,"code":"var _jsxFileName = \"/Users/satoshinakamoto/Documents/intellimint-ai/intellimint-chat/intellimint-chat-new/src/components/MessageList.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useRef, useEffect, memo, useState } from 'react';\nimport styled from 'styled-components';\nimport Prism from 'prismjs';\nimport 'prismjs/themes/prism-tomorrow.css';\nimport 'prismjs/components/prism-python';\nimport 'prismjs/components/prism-java';\nimport 'prismjs/components/prism-c';\nimport 'prismjs/components/prism-bash';\nimport 'prismjs/components/prism-javascript';\nimport 'prismjs/components/prism-jsx';\n\n// Styled components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageListContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: calc(100vh - 60px);\n  overflow-y: auto;\n  padding: 20px;\n  max-width: 100%;\n  box-sizing: border-box;\n`;\n_c = MessageListContainer;\nconst MessageWrapper = styled.div`\n  display: flex;\n  justify-content: ${props => props.isUser ? 'flex-end' : 'flex-start'};\n  margin-bottom: 10px;\n  width: 100%;\n`;\n_c2 = MessageWrapper;\nconst Message = styled.div`\n  background-color: ${props => props.isUser ? props.theme.colors.mutedGreen : props.theme.colors.primary};\n  color: ${props => props.theme.colors.text};\n  padding: 10px 15px;\n  border-radius: 20px;\n  max-width: 80%;\n  word-wrap: break-word;\n  overflow-wrap: break-word;\n  white-space: pre-wrap;\n  box-sizing: border-box;\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);\n  line-height: 1.0;\n  font-size: 1rem;\n`;\n_c3 = Message;\nconst CodeBlockWrapper = styled.div`\n  position: relative;\n  margin-top: 10px;\n  margin-bottom: 10px;\n`;\n_c4 = CodeBlockWrapper;\nconst CodeBlock = styled.pre`\n  background-color: #2d2d2d;\n  border-radius: 4px;\n  padding: 10px 10px 10px 3.8em;\n  margin: 10px 0;\n  font-family: 'Fira code', 'Fira Mono', monospace;\n  font-size: 14px;\n  line-height: 1.4; /* Adjusted to avoid extra space */\n  white-space: pre;\n  word-break: normal;\n  overflow-wrap: normal;\n  max-width: 100%;\n  overflow-x: auto;\n  box-sizing: border-box;\n  counter-reset: line;\n\n  code {\n    display: block;\n    position: relative;\n    \n    & > span {\n      display: block;\n\n      &::before {\n        content: counter(line);\n        counter-increment: line;\n        position: absolute;\n        left: -3em;\n        width: 2.5em;\n        text-align: right;\n        color: rgba(255, 255, 255, 0.4);\n      }\n    }\n  }\n`;\n_c5 = CodeBlock;\nconst CopyButton = styled.button`\n  position: absolute;\n  top: 5px;\n  right: 5px;\n  background: rgba(255, 255, 255, 0.1);\n  border: none;\n  color: #fff;\n  cursor: pointer;\n  font-size: 0.8rem;\n  padding: 5px 10px;\n  border-radius: 4px;\n  opacity: 0.7;\n  transition: opacity 0.2s, background 0.2s;\n\n  &:hover {\n    opacity: 1;\n    background: rgba(255, 255, 255, 0.2);\n  }\n`;\n_c6 = CopyButton;\nconst Header = styled.h3`\n  font-size: 1.2em;\n  margin-top: 20px;\n  margin-bottom: 10px;\n  color: ${props => props.theme.colors.text};\n`;\n_c7 = Header;\nconst MemoizedMessage = /*#__PURE__*/_s(/*#__PURE__*/memo(_c8 = _s(({\n  content,\n  isUser\n}) => {\n  _s();\n  const [copiedIndex, setCopiedIndex] = useState(null);\n  const copyToClipboard = (text, index) => {\n    navigator.clipboard.writeText(text).then(() => {\n      setCopiedIndex(index);\n      setTimeout(() => setCopiedIndex(null), 2000);\n    });\n  };\n  const formatContent = text => {\n    const codeBlockRegex = /```(\\w+)?\\n([\\s\\S]*?)```/g;\n    const boldTextRegex = /\\*\\*(.*?)\\*\\*/g;\n    const headerRegex = /^### (.*)$/gm;\n    const parts = [];\n    let lastIndex = 0;\n    let match;\n    let codeBlockIndex = 0;\n\n    // Handle headers\n    const textWithHeaders = text.split(headerRegex).map((part, index) => {\n      if (index % 2 === 1) {\n        return /*#__PURE__*/_jsxDEV(Header, {\n          children: part\n        }, `header-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 16\n        }, this);\n      }\n      return part;\n    });\n    textWithHeaders.forEach((part, index) => {\n      if (/*#__PURE__*/React.isValidElement(part)) {\n        parts.push(part);\n      } else {\n        // Handle code blocks\n        let lastCodeIndex = 0;\n        while ((match = codeBlockRegex.exec(part)) !== null) {\n          if (match.index > lastCodeIndex) {\n            const nonCodeBlockText = part.slice(lastCodeIndex, match.index);\n            // Handle bold text within non-code parts\n            const nonCodeWithBold = nonCodeBlockText.split(boldTextRegex).map((boldPart, boldIndex) => {\n              if (boldIndex % 2 === 1) {\n                return /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: boldPart\n                }, `bold-${boldIndex}`, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 153,\n                  columnNumber: 24\n                }, this);\n              }\n              return boldPart;\n            });\n            parts.push(/*#__PURE__*/_jsxDEV(\"div\", {\n              children: nonCodeWithBold\n            }, `text-${index}-${lastCodeIndex}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 24\n            }, this));\n          }\n          const language = match[1] || 'text';\n          const code = match[2].trim();\n          const highlightedCode = Prism.languages[language] ? Prism.highlight(code, Prism.languages[language], language) : code;\n          const codeWithLineNumbers = highlightedCode.split('\\n').map((line, index) => `<span key=\"${index}\">${line}</span>`).join('\\n');\n          parts.push(/*#__PURE__*/_jsxDEV(CodeBlockWrapper, {\n            children: [/*#__PURE__*/_jsxDEV(CopyButton, {\n              onClick: () => copyToClipboard(code, codeBlockIndex),\n              children: copiedIndex === codeBlockIndex ? \"âœ… Copied\" : \"ðŸ“‹ Copy\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(CodeBlock, {\n              children: /*#__PURE__*/_jsxDEV(\"code\", {\n                dangerouslySetInnerHTML: {\n                  __html: codeWithLineNumbers\n                },\n                className: `language-${language}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 178,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 15\n            }, this)]\n          }, `code-${index}-${match.index}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 13\n          }, this));\n          lastCodeIndex = match.index + match[0].length;\n          codeBlockIndex++;\n        }\n\n        // Handle remaining text after last code block\n        if (lastCodeIndex < part.length) {\n          const remainingText = part.slice(lastCodeIndex);\n          const remainingWithBold = remainingText.split(boldTextRegex).map((boldPart, boldIndex) => {\n            if (boldIndex % 2 === 1) {\n              return /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: boldPart\n              }, `bold-${boldIndex}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 22\n              }, this);\n            }\n            return boldPart;\n          });\n          parts.push(/*#__PURE__*/_jsxDEV(\"div\", {\n            children: remainingWithBold\n          }, `text-${index}-end`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 22\n          }, this));\n        }\n      }\n    });\n    return parts;\n  };\n  return /*#__PURE__*/_jsxDEV(MessageWrapper, {\n    isUser: isUser,\n    children: /*#__PURE__*/_jsxDEV(Message, {\n      isUser: isUser,\n      children: formatContent(content)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 5\n  }, this);\n}, \"vmguM15Tqrzn4pZ8KoXNjtu9s9w=\")), \"vmguM15Tqrzn4pZ8KoXNjtu9s9w=\");\n\n// MessageList Component\n_c9 = MemoizedMessage;\nconst MessageList = ({\n  messages\n}) => {\n  _s2();\n  const messagesEndRef = useRef(null);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  useEffect(() => {\n    if (messages && messages.length) {\n      scrollToBottom();\n    }\n  }, [messages]);\n  if (!messages || !Array.isArray(messages)) {\n    console.error('Messages prop is invalid');\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(MessageListContainer, {\n    children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(MemoizedMessage, {\n      content: message.content || 'Message content unavailable',\n      isUser: message.role === 'user'\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: messagesEndRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 231,\n    columnNumber: 5\n  }, this);\n};\n_s2(MessageList, \"0epSoi03NVSoD0I0FiLK4iVNXOA=\");\n_c10 = MessageList;\nexport default _c11 = /*#__PURE__*/memo(MessageList);\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11;\n$RefreshReg$(_c, \"MessageListContainer\");\n$RefreshReg$(_c2, \"MessageWrapper\");\n$RefreshReg$(_c3, \"Message\");\n$RefreshReg$(_c4, \"CodeBlockWrapper\");\n$RefreshReg$(_c5, \"CodeBlock\");\n$RefreshReg$(_c6, \"CopyButton\");\n$RefreshReg$(_c7, \"Header\");\n$RefreshReg$(_c8, \"MemoizedMessage$memo\");\n$RefreshReg$(_c9, \"MemoizedMessage\");\n$RefreshReg$(_c10, \"MessageList\");\n$RefreshReg$(_c11, \"%default%\");","map":{"version":3,"names":["React","useRef","useEffect","memo","useState","styled","Prism","jsxDEV","_jsxDEV","MessageListContainer","div","_c","MessageWrapper","props","isUser","_c2","Message","theme","colors","mutedGreen","primary","text","_c3","CodeBlockWrapper","_c4","CodeBlock","pre","_c5","CopyButton","button","_c6","Header","h3","_c7","MemoizedMessage","_s","_c8","content","copiedIndex","setCopiedIndex","copyToClipboard","index","navigator","clipboard","writeText","then","setTimeout","formatContent","codeBlockRegex","boldTextRegex","headerRegex","parts","lastIndex","match","codeBlockIndex","textWithHeaders","split","map","part","children","fileName","_jsxFileName","lineNumber","columnNumber","forEach","isValidElement","push","lastCodeIndex","exec","nonCodeBlockText","slice","nonCodeWithBold","boldPart","boldIndex","language","code","trim","highlightedCode","languages","highlight","codeWithLineNumbers","line","join","onClick","dangerouslySetInnerHTML","__html","className","length","remainingText","remainingWithBold","_c9","MessageList","messages","_s2","messagesEndRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","Array","isArray","console","error","message","role","ref","_c10","_c11","$RefreshReg$"],"sources":["/Users/satoshinakamoto/Documents/intellimint-ai/intellimint-chat/intellimint-chat-new/src/components/MessageList.js"],"sourcesContent":["import React, { useRef, useEffect, memo, useState } from 'react';\nimport styled from 'styled-components';\nimport Prism from 'prismjs';\nimport 'prismjs/themes/prism-tomorrow.css';\nimport 'prismjs/components/prism-python';\nimport 'prismjs/components/prism-java';\nimport 'prismjs/components/prism-c';\nimport 'prismjs/components/prism-bash';\nimport 'prismjs/components/prism-javascript';\nimport 'prismjs/components/prism-jsx';\n\n// Styled components\nconst MessageListContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: calc(100vh - 60px);\n  overflow-y: auto;\n  padding: 20px;\n  max-width: 100%;\n  box-sizing: border-box;\n`;\n\nconst MessageWrapper = styled.div`\n  display: flex;\n  justify-content: ${props => (props.isUser ? 'flex-end' : 'flex-start')};\n  margin-bottom: 10px;\n  width: 100%;\n`;\n\nconst Message = styled.div`\n  background-color: ${props => (props.isUser ? props.theme.colors.mutedGreen : props.theme.colors.primary)};\n  color: ${props => props.theme.colors.text};\n  padding: 10px 15px;\n  border-radius: 20px;\n  max-width: 80%;\n  word-wrap: break-word;\n  overflow-wrap: break-word;\n  white-space: pre-wrap;\n  box-sizing: border-box;\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);\n  line-height: 1.0;\n  font-size: 1rem;\n`;\n\nconst CodeBlockWrapper = styled.div`\n  position: relative;\n  margin-top: 10px;\n  margin-bottom: 10px;\n`;\n\nconst CodeBlock = styled.pre`\n  background-color: #2d2d2d;\n  border-radius: 4px;\n  padding: 10px 10px 10px 3.8em;\n  margin: 10px 0;\n  font-family: 'Fira code', 'Fira Mono', monospace;\n  font-size: 14px;\n  line-height: 1.4; /* Adjusted to avoid extra space */\n  white-space: pre;\n  word-break: normal;\n  overflow-wrap: normal;\n  max-width: 100%;\n  overflow-x: auto;\n  box-sizing: border-box;\n  counter-reset: line;\n\n  code {\n    display: block;\n    position: relative;\n    \n    & > span {\n      display: block;\n\n      &::before {\n        content: counter(line);\n        counter-increment: line;\n        position: absolute;\n        left: -3em;\n        width: 2.5em;\n        text-align: right;\n        color: rgba(255, 255, 255, 0.4);\n      }\n    }\n  }\n`;\n\nconst CopyButton = styled.button`\n  position: absolute;\n  top: 5px;\n  right: 5px;\n  background: rgba(255, 255, 255, 0.1);\n  border: none;\n  color: #fff;\n  cursor: pointer;\n  font-size: 0.8rem;\n  padding: 5px 10px;\n  border-radius: 4px;\n  opacity: 0.7;\n  transition: opacity 0.2s, background 0.2s;\n\n  &:hover {\n    opacity: 1;\n    background: rgba(255, 255, 255, 0.2);\n  }\n`;\n\nconst Header = styled.h3`\n  font-size: 1.2em;\n  margin-top: 20px;\n  margin-bottom: 10px;\n  color: ${props => props.theme.colors.text};\n`;\n\nconst MemoizedMessage = memo(({ content, isUser }) => {\n  const [copiedIndex, setCopiedIndex] = useState(null);\n\n  const copyToClipboard = (text, index) => {\n    navigator.clipboard.writeText(text).then(() => {\n      setCopiedIndex(index);\n      setTimeout(() => setCopiedIndex(null), 2000);\n    });\n  };\n\n  const formatContent = (text) => {\n    const codeBlockRegex = /```(\\w+)?\\n([\\s\\S]*?)```/g;\n    const boldTextRegex = /\\*\\*(.*?)\\*\\*/g;\n    const headerRegex = /^### (.*)$/gm;\n    const parts = [];\n    let lastIndex = 0;\n    let match;\n    let codeBlockIndex = 0;\n\n    // Handle headers\n    const textWithHeaders = text.split(headerRegex).map((part, index) => {\n      if (index % 2 === 1) {\n        return <Header key={`header-${index}`}>{part}</Header>;\n      }\n      return part;\n    });\n\n    textWithHeaders.forEach((part, index) => {\n      if (React.isValidElement(part)) {\n        parts.push(part);\n      } else {\n        // Handle code blocks\n        let lastCodeIndex = 0;\n        while ((match = codeBlockRegex.exec(part)) !== null) {\n          if (match.index > lastCodeIndex) {\n            const nonCodeBlockText = part.slice(lastCodeIndex, match.index);\n            // Handle bold text within non-code parts\n            const nonCodeWithBold = nonCodeBlockText.split(boldTextRegex).map((boldPart, boldIndex) => {\n              if (boldIndex % 2 === 1) {\n                return <strong key={`bold-${boldIndex}`}>{boldPart}</strong>;\n              }\n              return boldPart;\n            });\n            parts.push(<div key={`text-${index}-${lastCodeIndex}`}>{nonCodeWithBold}</div>);\n          }\n\n          const language = match[1] || 'text';\n          const code = match[2].trim();\n\n          const highlightedCode = Prism.languages[language]\n            ? Prism.highlight(code, Prism.languages[language], language)\n            : code;\n\n          const codeWithLineNumbers = highlightedCode\n            .split('\\n')\n            .map((line, index) => `<span key=\"${index}\">${line}</span>`)\n            .join('\\n');\n\n          parts.push(\n            <CodeBlockWrapper key={`code-${index}-${match.index}`}>\n              <CopyButton onClick={() => copyToClipboard(code, codeBlockIndex)}>\n                {copiedIndex === codeBlockIndex ? \"âœ… Copied\" : \"ðŸ“‹ Copy\"}\n              </CopyButton>\n              <CodeBlock>\n                <code dangerouslySetInnerHTML={{ __html: codeWithLineNumbers }} className={`language-${language}`} />\n              </CodeBlock>\n            </CodeBlockWrapper>\n          );\n\n          lastCodeIndex = match.index + match[0].length;\n          codeBlockIndex++;\n        }\n\n        // Handle remaining text after last code block\n        if (lastCodeIndex < part.length) {\n          const remainingText = part.slice(lastCodeIndex);\n          const remainingWithBold = remainingText.split(boldTextRegex).map((boldPart, boldIndex) => {\n            if (boldIndex % 2 === 1) {\n              return <strong key={`bold-${boldIndex}`}>{boldPart}</strong>;\n            }\n            return boldPart;\n          });\n          parts.push(<div key={`text-${index}-end`}>{remainingWithBold}</div>);\n        }\n      }\n    });\n\n    return parts;\n  };\n\n  return (\n    <MessageWrapper isUser={isUser}>\n      <Message isUser={isUser}>{formatContent(content)}</Message>\n    </MessageWrapper>\n  );\n});\n\n// MessageList Component\nconst MessageList = ({ messages }) => {\n  const messagesEndRef = useRef(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    if (messages && messages.length) {\n      scrollToBottom();\n    }\n  }, [messages]);\n\n  if (!messages || !Array.isArray(messages)) {\n    console.error('Messages prop is invalid');\n    return null;\n  }\n\n  return (\n    <MessageListContainer>\n      {messages.map((message, index) => (\n        <MemoizedMessage\n          key={index}\n          content={message.content || 'Message content unavailable'}\n          isUser={message.role === 'user'}\n        />\n      ))}\n      <div ref={messagesEndRef} />\n    </MessageListContainer>\n  );\n};\n\nexport default memo(MessageList);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}