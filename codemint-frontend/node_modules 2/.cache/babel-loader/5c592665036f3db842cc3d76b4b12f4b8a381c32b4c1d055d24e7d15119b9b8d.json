{"ast":null,"code":"var _jsxFileName = \"/Users/satoshinakamoto/Documents/intellimint-ai/intellimint-chat/intellimint-chat-new/src/components/MessageHelper.js\";\n// MessageHelper.js\nimport React, { memo } from 'react';\nimport styled from 'styled-components';\nimport Prism from 'prismjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageWrapper = styled.div`\n  display: flex;\n  justify-content: ${props => props.isUser ? 'flex-end' : 'flex-start'};\n  margin-bottom: 10px;\n  width: 100%;\n`;\n_c = MessageWrapper;\nconst Message = styled.div`\n  background-color: ${props => props.isUser ? props.theme.colors.mutedGreen : props.theme.colors.primary};\n  color: ${props => props.theme.colors.text};\n  padding: 10px 15px;\n  border-radius: 20px;\n  max-width: 80%;\n  word-wrap: break-word;\n  white-space: pre-wrap;\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);\n`;\n_c2 = Message;\nconst CodeBlock = styled.pre`\n  background-color: #2d2d2d;\n  padding: 10px;\n  font-family: 'Fira code', 'Fira Mono', monospace;\n  font-size: 14px;\n  white-space: pre-wrap;\n  word-break: break-all;\n  max-width: 100%;\n  overflow-x: auto;\n`;\n_c3 = CodeBlock;\nconst MemoizedMessage = /*#__PURE__*/memo(_c4 = ({\n  content,\n  isUser\n}) => {\n  const formatContent = text => {\n    try {\n      const codeBlockRegex = /```(\\w+)?\\n([\\s\\S]*?)```/g;\n      const boldTextRegex = /\\*\\*(.*?)\\*\\*/g;\n      const parts = [];\n      let lastIndex = 0;\n      let match;\n      while ((match = codeBlockRegex.exec(text)) !== null) {\n        if (match.index > lastIndex) {\n          const nonCodeBlockText = text.slice(lastIndex, match.index);\n          const nonCodeWithBold = nonCodeBlockText.split(boldTextRegex).map((part, index) => {\n            if (index % 2 === 1) {\n              return /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: part\n              }, `bold-${index}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 49,\n                columnNumber: 22\n              }, this);\n            }\n            return part;\n          });\n          parts.push(/*#__PURE__*/_jsxDEV(\"div\", {\n            children: nonCodeWithBold\n          }, lastIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 22\n          }, this));\n        }\n        const language = match[1] || 'text';\n        const code = match[2].trim();\n        const highlightedCode = Prism.languages[language] ? Prism.highlight(code, Prism.languages[language], language) : code;\n        parts.push(/*#__PURE__*/_jsxDEV(CodeBlock, {\n          className: `language-${language}`,\n          children: highlightedCode\n        }, match.index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this));\n        lastIndex = match.index + match[0].length;\n      }\n      if (lastIndex < text.length) {\n        const remainingText = text.slice(lastIndex);\n        const remainingWithBold = remainingText.split(boldTextRegex).map((part, index) => {\n          if (index % 2 === 1) {\n            return /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: part\n            }, `bold-${index}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 20\n            }, this);\n          }\n          return part;\n        });\n        parts.push(/*#__PURE__*/_jsxDEV(\"div\", {\n          children: remainingWithBold\n        }, lastIndex + text.length, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 20\n        }, this));\n      }\n      return parts;\n    } catch (error) {\n      console.error('Error formatting content:', error);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 14\n      }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(MessageWrapper, {\n    isUser: isUser,\n    children: /*#__PURE__*/_jsxDEV(Message, {\n      isUser: isUser,\n      children: formatContent(content)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n});\n_c5 = MemoizedMessage;\nexport default MemoizedMessage;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"MessageWrapper\");\n$RefreshReg$(_c2, \"Message\");\n$RefreshReg$(_c3, \"CodeBlock\");\n$RefreshReg$(_c4, \"MemoizedMessage$memo\");\n$RefreshReg$(_c5, \"MemoizedMessage\");","map":{"version":3,"names":["React","memo","styled","Prism","jsxDEV","_jsxDEV","MessageWrapper","div","props","isUser","_c","Message","theme","colors","mutedGreen","primary","text","_c2","CodeBlock","pre","_c3","MemoizedMessage","_c4","content","formatContent","codeBlockRegex","boldTextRegex","parts","lastIndex","match","exec","index","nonCodeBlockText","slice","nonCodeWithBold","split","map","part","children","fileName","_jsxFileName","lineNumber","columnNumber","push","language","code","trim","highlightedCode","languages","highlight","className","length","remainingText","remainingWithBold","error","console","_c5","$RefreshReg$"],"sources":["/Users/satoshinakamoto/Documents/intellimint-ai/intellimint-chat/intellimint-chat-new/src/components/MessageHelper.js"],"sourcesContent":["// MessageHelper.js\nimport React, { memo } from 'react';\nimport styled from 'styled-components';\nimport Prism from 'prismjs';\n\nconst MessageWrapper = styled.div`\n  display: flex;\n  justify-content: ${props => (props.isUser ? 'flex-end' : 'flex-start')};\n  margin-bottom: 10px;\n  width: 100%;\n`;\n\nconst Message = styled.div`\n  background-color: ${props => (props.isUser ? props.theme.colors.mutedGreen : props.theme.colors.primary)};\n  color: ${props => props.theme.colors.text};\n  padding: 10px 15px;\n  border-radius: 20px;\n  max-width: 80%;\n  word-wrap: break-word;\n  white-space: pre-wrap;\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);\n`;\n\nconst CodeBlock = styled.pre`\n  background-color: #2d2d2d;\n  padding: 10px;\n  font-family: 'Fira code', 'Fira Mono', monospace;\n  font-size: 14px;\n  white-space: pre-wrap;\n  word-break: break-all;\n  max-width: 100%;\n  overflow-x: auto;\n`;\n\nconst MemoizedMessage = memo(({ content, isUser }) => {\n  const formatContent = (text) => {\n    try {\n      const codeBlockRegex = /```(\\w+)?\\n([\\s\\S]*?)```/g;\n      const boldTextRegex = /\\*\\*(.*?)\\*\\*/g;\n      const parts = [];\n      let lastIndex = 0;\n      let match;\n\n      while ((match = codeBlockRegex.exec(text)) !== null) {\n        if (match.index > lastIndex) {\n          const nonCodeBlockText = text.slice(lastIndex, match.index);\n          const nonCodeWithBold = nonCodeBlockText.split(boldTextRegex).map((part, index) => {\n            if (index % 2 === 1) {\n              return <strong key={`bold-${index}`}>{part}</strong>;\n            }\n            return part;\n          });\n          parts.push(<div key={lastIndex}>{nonCodeWithBold}</div>);\n        }\n\n        const language = match[1] || 'text';\n        const code = match[2].trim();\n        const highlightedCode = Prism.languages[language]\n          ? Prism.highlight(code, Prism.languages[language], language)\n          : code;\n\n        parts.push(\n          <CodeBlock key={match.index} className={`language-${language}`}>\n            {highlightedCode}\n          </CodeBlock>\n        );\n\n        lastIndex = match.index + match[0].length;\n      }\n\n      if (lastIndex < text.length) {\n        const remainingText = text.slice(lastIndex);\n        const remainingWithBold = remainingText.split(boldTextRegex).map((part, index) => {\n          if (index % 2 === 1) {\n            return <strong key={`bold-${index}`}>{part}</strong>;\n          }\n          return part;\n        });\n        parts.push(<div key={lastIndex + text.length}>{remainingWithBold}</div>);\n      }\n\n      return parts;\n    } catch (error) {\n      console.error('Error formatting content:', error);\n      return <div>{text}</div>;\n    }\n  };\n\n  return (\n    <MessageWrapper isUser={isUser}>\n      <Message isUser={isUser}>{formatContent(content)}</Message>\n    </MessageWrapper>\n  );\n});\n\nexport default MemoizedMessage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}