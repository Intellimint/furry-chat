{"ast":null,"code":"var _jsxFileName = \"/Users/satoshinakamoto/Documents/intellimint-ai/intellimint-chat/intellimint-chat-new/src/components/ChatWindow.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport MessageList from './MessageList';\nimport MessageInput from './MessageInput';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatWindowWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: calc(100vh - 60px);\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n`;\n_c = ChatWindowWrapper;\nconst ChatWindow = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [sessionId, setSessionId] = useState(null);\n  const sendMessage = async content => {\n    try {\n      setMessages(prevMessages => [...prevMessages, {\n        role: 'user',\n        content\n      }]);\n      const response = await axios.post('http://localhost:8000/chat', {\n        session_id: sessionId,\n        message: content\n      });\n      setMessages(prevMessages => [...prevMessages, {\n        role: 'assistant',\n        content: response.data.message\n      }]);\n      setSessionId(response.data.session_id);\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setMessages(prevMessages => [...prevMessages, {\n        role: 'assistant',\n        content: 'Error: Could not send message'\n      }]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(ChatWindowWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(MessageList, {\n      messages: messages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n      onSendMessage: sendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatWindow, \"WzQlICIsFtZKPKO4xEg8QS369p8=\");\n_c2 = ChatWindow;\nexport default ChatWindow;\nvar _c, _c2;\n$RefreshReg$(_c, \"ChatWindowWrapper\");\n$RefreshReg$(_c2, \"ChatWindow\");","map":{"version":3,"names":["React","useState","styled","MessageList","MessageInput","axios","jsxDEV","_jsxDEV","ChatWindowWrapper","div","props","theme","colors","background","text","_c","ChatWindow","_s","messages","setMessages","sessionId","setSessionId","sendMessage","content","prevMessages","role","response","post","session_id","message","data","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","onSendMessage","_c2","$RefreshReg$"],"sources":["/Users/satoshinakamoto/Documents/intellimint-ai/intellimint-chat/intellimint-chat-new/src/components/ChatWindow.js"],"sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport MessageList from './MessageList';\nimport MessageInput from './MessageInput';\nimport axios from 'axios';\n\nconst ChatWindowWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: calc(100vh - 60px);\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n`;\n\nconst ChatWindow = () => {\n  const [messages, setMessages] = useState([]);\n  const [sessionId, setSessionId] = useState(null);\n\n  const sendMessage = async (content) => {\n    try {\n      setMessages(prevMessages => [...prevMessages, { role: 'user', content }]);\n      \n      const response = await axios.post('http://localhost:8000/chat', {\n        session_id: sessionId,\n        message: content\n      });\n      \n      setMessages(prevMessages => [...prevMessages, { role: 'assistant', content: response.data.message }]);\n      setSessionId(response.data.session_id);\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setMessages(prevMessages => [...prevMessages, { role: 'assistant', content: 'Error: Could not send message' }]);\n    }\n  };\n\n  return (\n    <ChatWindowWrapper>\n      <MessageList messages={messages} />\n      <MessageInput onSendMessage={sendMessage} />\n    </ChatWindowWrapper>\n  );\n};\n\nexport default ChatWindow;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,iBAAiB,GAAGN,MAAM,CAACO,GAAG;AACpC;AACA;AACA;AACA,sBAAsBC,KAAK,IAAIA,KAAK,CAACC,KAAK,CAACC,MAAM,CAACC,UAAU;AAC5D,WAAWH,KAAK,IAAIA,KAAK,CAACC,KAAK,CAACC,MAAM,CAACE,IAAI;AAC3C,CAAC;AAACC,EAAA,GANIP,iBAAiB;AAQvB,MAAMQ,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACmB,SAAS,EAAEC,YAAY,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EAEhD,MAAMqB,WAAW,GAAG,MAAOC,OAAO,IAAK;IACrC,IAAI;MACFJ,WAAW,CAACK,YAAY,IAAI,CAAC,GAAGA,YAAY,EAAE;QAAEC,IAAI,EAAE,MAAM;QAAEF;MAAQ,CAAC,CAAC,CAAC;MAEzE,MAAMG,QAAQ,GAAG,MAAMrB,KAAK,CAACsB,IAAI,CAAC,4BAA4B,EAAE;QAC9DC,UAAU,EAAER,SAAS;QACrBS,OAAO,EAAEN;MACX,CAAC,CAAC;MAEFJ,WAAW,CAACK,YAAY,IAAI,CAAC,GAAGA,YAAY,EAAE;QAAEC,IAAI,EAAE,WAAW;QAAEF,OAAO,EAAEG,QAAQ,CAACI,IAAI,CAACD;MAAQ,CAAC,CAAC,CAAC;MACrGR,YAAY,CAACK,QAAQ,CAACI,IAAI,CAACF,UAAU,CAAC;IACxC,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9CZ,WAAW,CAACK,YAAY,IAAI,CAAC,GAAGA,YAAY,EAAE;QAAEC,IAAI,EAAE,WAAW;QAAEF,OAAO,EAAE;MAAgC,CAAC,CAAC,CAAC;IACjH;EACF,CAAC;EAED,oBACEhB,OAAA,CAACC,iBAAiB;IAAAyB,QAAA,gBAChB1B,OAAA,CAACJ,WAAW;MAACe,QAAQ,EAAEA;IAAS;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACnC9B,OAAA,CAACH,YAAY;MAACkC,aAAa,EAAEhB;IAAY;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3B,CAAC;AAExB,CAAC;AAACpB,EAAA,CA3BID,UAAU;AAAAuB,GAAA,GAAVvB,UAAU;AA6BhB,eAAeA,UAAU;AAAC,IAAAD,EAAA,EAAAwB,GAAA;AAAAC,YAAA,CAAAzB,EAAA;AAAAyB,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}