{"ast":null,"code":"var _jsxFileName = \"/Users/satoshinakamoto/Documents/intellimint-ai/intellimint-chat/intellimint-chat-new/src/components/MessageList.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useRef, useEffect, memo, useState } from 'react';\nimport styled from 'styled-components';\nimport Prism from 'prismjs';\nimport 'prismjs/themes/prism-tomorrow.css';\nimport 'prismjs/components/prism-python';\nimport 'prismjs/components/prism-java';\nimport 'prismjs/components/prism-c';\nimport 'prismjs/components/prism-bash';\nimport 'prismjs/components/prism-javascript';\nimport 'prismjs/components/prism-jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageListContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: calc(100vh - 60px);\n  overflow-y: auto;\n  padding: 20px;\n  max-width: 100%;\n  box-sizing: border-box;\n`;\n_c = MessageListContainer;\nconst MessageWrapper = styled.div`\n  display: flex;\n  justify-content: ${props => props.isUser ? 'flex-end' : 'flex-start'};\n  margin-bottom: 10px;\n  width: 100%;\n`;\n_c2 = MessageWrapper;\nconst Message = styled.div`\n  background-color: ${props => props.isUser ? props.theme.colors.mutedGreen : props.theme.colors.primary};\n  color: ${props => props.theme.colors.text};\n  padding: 10px 15px;\n  border-radius: 20px;\n  max-width: 80%;\n  word-wrap: break-word;\n  overflow-wrap: break-word;\n  white-space: pre-wrap;\n  box-sizing: border-box;\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);\n  line-height: 1.4;\n  font-size: 1rem;\n`;\n_c3 = Message;\nconst CodeBlockWrapper = styled.div`\n  position: relative;\n  margin-top: 10px;\n  margin-bottom: 10px;\n`;\n_c4 = CodeBlockWrapper;\nconst CodeBlock = styled.pre`\n  background-color: #2d2d2d;\n  border-radius: 4px;\n  padding: 10px;\n  margin: 10px 0;\n  font-family: 'Fira code', 'Fira Mono', monospace;\n  font-size: 14px;\n  white-space: pre;\n  word-break: normal;\n  overflow-wrap: normal;\n  max-width: 100%;\n  overflow-x: auto;\n  box-sizing: border-box;\n  display: grid;\n  grid-template-columns: 40px 1fr; /* Line number column and code column */\n  grid-gap: 10px;\n\n  code {\n    display: block;\n    line-height: 1.5;\n  }\n`;\n_c5 = CodeBlock;\nconst LineNumber = styled.span`\n  text-align: right;\n  color: rgba(255, 255, 255, 0.4);\n  user-select: none; /* Prevent copying line numbers */\n`;\n_c6 = LineNumber;\nconst CodeContent = styled.code`\n  white-space: pre-wrap;\n`;\n_c7 = CodeContent;\nconst CopyButton = styled.button`\n  position: absolute;\n  top: 5px;\n  right: 5px;\n  background: transparent;\n  border: none;\n  color: #fff;\n  cursor: pointer;\n  font-size: 0.8rem;\n  padding: 5px;\n  opacity: 0.7;\n  transition: opacity 0.2s;\n\n  &:hover {\n    opacity: 1;\n  }\n`;\n_c8 = CopyButton;\nconst MemoizedMessage = /*#__PURE__*/_s(/*#__PURE__*/memo(_c9 = _s(({\n  content,\n  isUser\n}) => {\n  _s();\n  const [copiedIndex, setCopiedIndex] = useState(null);\n  const copyToClipboard = (text, index) => {\n    navigator.clipboard.writeText(text).then(() => {\n      setCopiedIndex(index);\n      setTimeout(() => setCopiedIndex(null), 2000); // Reset after 2 seconds\n    });\n  };\n  const formatContent = text => {\n    try {\n      const codeBlockRegex = /```(\\w+)?\\n([\\s\\S]*?)```/g;\n      const boldTextRegex = /\\*\\*(.*?)\\*\\*/g;\n      const parts = [];\n      let lastIndex = 0;\n      let match;\n      let codeBlockIndex = 0;\n\n      // Handle code blocks\n      while ((match = codeBlockRegex.exec(text)) !== null) {\n        if (match.index > lastIndex) {\n          const nonCodeBlockText = text.slice(lastIndex, match.index);\n\n          // Handle bold text within non-code parts\n          const nonCodeWithBold = nonCodeBlockText.split(boldTextRegex).map((part, index) => {\n            if (index % 2 === 1) {\n              return /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: part\n              }, `bold-${index}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 22\n              }, this);\n            }\n            return part;\n          });\n          parts.push(/*#__PURE__*/_jsxDEV(\"div\", {\n            children: nonCodeWithBold\n          }, lastIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 22\n          }, this));\n        }\n        const language = match[1] || 'text';\n        const code = match[2].trim();\n        const highlightedCode = Prism.languages[language] ? Prism.highlight(code, Prism.languages[language], language) : code;\n        const codeLines = highlightedCode.split('\\n').map((line, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(LineNumber, {\n            children: index + 1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CodeContent, {\n            dangerouslySetInnerHTML: {\n              __html: line\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 13\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this));\n        parts.push(/*#__PURE__*/_jsxDEV(CodeBlockWrapper, {\n          children: [/*#__PURE__*/_jsxDEV(CopyButton, {\n            onClick: () => copyToClipboard(code, codeBlockIndex),\n            children: copiedIndex === codeBlockIndex ? \"âœ… Copied\" : \"ðŸ“‹ Copy\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CodeBlock, {\n            children: codeLines\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 13\n          }, this)]\n        }, match.index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this));\n        lastIndex = match.index + match[0].length;\n        codeBlockIndex++;\n      }\n\n      // Handle remaining non-code text\n      if (lastIndex < text.length) {\n        const remainingText = text.slice(lastIndex);\n        const remainingWithBold = remainingText.split(boldTextRegex).map((part, index) => {\n          if (index % 2 === 1) {\n            return /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: part\n            }, `bold-${index}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 20\n            }, this);\n          }\n          return part;\n        });\n        parts.push(/*#__PURE__*/_jsxDEV(\"div\", {\n          children: remainingWithBold\n        }, lastIndex + text.length, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 20\n        }, this));\n      }\n      return parts;\n    } catch (error) {\n      console.error('Error formatting content:', error);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 14\n      }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(MessageWrapper, {\n    isUser: isUser,\n    children: /*#__PURE__*/_jsxDEV(Message, {\n      isUser: isUser,\n      children: formatContent(content)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 5\n  }, this);\n}, \"vmguM15Tqrzn4pZ8KoXNjtu9s9w=\")), \"vmguM15Tqrzn4pZ8KoXNjtu9s9w=\");\n_c10 = MemoizedMessage;\nconst MessageList = ({\n  messages\n}) => {\n  _s2();\n  const messagesEndRef = useRef(null);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  useEffect(() => {\n    if (messages && messages.length) {\n      scrollToBottom();\n    }\n  }, [messages]);\n  if (!messages || !Array.isArray(messages)) {\n    console.error('Messages prop is invalid');\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(MessageListContainer, {\n    children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(MemoizedMessage, {\n      content: message.content || 'Message content unavailable',\n      isUser: message.role === 'user'\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 5\n  }, this);\n};\n_s2(MessageList, \"0epSoi03NVSoD0I0FiLK4iVNXOA=\");\n_c11 = MessageList;\nexport default _c12 = /*#__PURE__*/memo(MessageList);\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12;\n$RefreshReg$(_c, \"MessageListContainer\");\n$RefreshReg$(_c2, \"MessageWrapper\");\n$RefreshReg$(_c3, \"Message\");\n$RefreshReg$(_c4, \"CodeBlockWrapper\");\n$RefreshReg$(_c5, \"CodeBlock\");\n$RefreshReg$(_c6, \"LineNumber\");\n$RefreshReg$(_c7, \"CodeContent\");\n$RefreshReg$(_c8, \"CopyButton\");\n$RefreshReg$(_c9, \"MemoizedMessage$memo\");\n$RefreshReg$(_c10, \"MemoizedMessage\");\n$RefreshReg$(_c11, \"MessageList\");\n$RefreshReg$(_c12, \"%default%\");","map":{"version":3,"names":["React","useRef","useEffect","memo","useState","styled","Prism","jsxDEV","_jsxDEV","MessageListContainer","div","_c","MessageWrapper","props","isUser","_c2","Message","theme","colors","mutedGreen","primary","text","_c3","CodeBlockWrapper","_c4","CodeBlock","pre","_c5","LineNumber","span","_c6","CodeContent","code","_c7","CopyButton","button","_c8","MemoizedMessage","_s","_c9","content","copiedIndex","setCopiedIndex","copyToClipboard","index","navigator","clipboard","writeText","then","setTimeout","formatContent","codeBlockRegex","boldTextRegex","parts","lastIndex","match","codeBlockIndex","exec","nonCodeBlockText","slice","nonCodeWithBold","split","map","part","children","fileName","_jsxFileName","lineNumber","columnNumber","push","language","trim","highlightedCode","languages","highlight","codeLines","line","Fragment","dangerouslySetInnerHTML","__html","onClick","length","remainingText","remainingWithBold","error","console","_c10","MessageList","messages","_s2","messagesEndRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","Array","isArray","message","role","_c11","_c12","$RefreshReg$"],"sources":["/Users/satoshinakamoto/Documents/intellimint-ai/intellimint-chat/intellimint-chat-new/src/components/MessageList.js"],"sourcesContent":["import React, { useRef, useEffect, memo, useState } from 'react';\nimport styled from 'styled-components';\nimport Prism from 'prismjs';\nimport 'prismjs/themes/prism-tomorrow.css';\nimport 'prismjs/components/prism-python';\nimport 'prismjs/components/prism-java';\nimport 'prismjs/components/prism-c';\nimport 'prismjs/components/prism-bash';\nimport 'prismjs/components/prism-javascript';\nimport 'prismjs/components/prism-jsx';\n\n\nconst MessageListContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: calc(100vh - 60px);\n  overflow-y: auto;\n  padding: 20px;\n  max-width: 100%;\n  box-sizing: border-box;\n`;\n\nconst MessageWrapper = styled.div`\n  display: flex;\n  justify-content: ${props => (props.isUser ? 'flex-end' : 'flex-start')};\n  margin-bottom: 10px;\n  width: 100%;\n`;\n\nconst Message = styled.div`\n  background-color: ${props => (props.isUser ? props.theme.colors.mutedGreen : props.theme.colors.primary)};\n  color: ${props => props.theme.colors.text};\n  padding: 10px 15px;\n  border-radius: 20px;\n  max-width: 80%;\n  word-wrap: break-word;\n  overflow-wrap: break-word;\n  white-space: pre-wrap;\n  box-sizing: border-box;\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);\n  line-height: 1.4;\n  font-size: 1rem;\n`;\n\nconst CodeBlockWrapper = styled.div`\n  position: relative;\n  margin-top: 10px;\n  margin-bottom: 10px;\n`;\n\nconst CodeBlock = styled.pre`\n  background-color: #2d2d2d;\n  border-radius: 4px;\n  padding: 10px;\n  margin: 10px 0;\n  font-family: 'Fira code', 'Fira Mono', monospace;\n  font-size: 14px;\n  white-space: pre;\n  word-break: normal;\n  overflow-wrap: normal;\n  max-width: 100%;\n  overflow-x: auto;\n  box-sizing: border-box;\n  display: grid;\n  grid-template-columns: 40px 1fr; /* Line number column and code column */\n  grid-gap: 10px;\n\n  code {\n    display: block;\n    line-height: 1.5;\n  }\n`;\n\nconst LineNumber = styled.span`\n  text-align: right;\n  color: rgba(255, 255, 255, 0.4);\n  user-select: none; /* Prevent copying line numbers */\n`;\n\nconst CodeContent = styled.code`\n  white-space: pre-wrap;\n`;\n\nconst CopyButton = styled.button`\n  position: absolute;\n  top: 5px;\n  right: 5px;\n  background: transparent;\n  border: none;\n  color: #fff;\n  cursor: pointer;\n  font-size: 0.8rem;\n  padding: 5px;\n  opacity: 0.7;\n  transition: opacity 0.2s;\n\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nconst MemoizedMessage = memo(({ content, isUser }) => {\n  const [copiedIndex, setCopiedIndex] = useState(null);\n\n  const copyToClipboard = (text, index) => {\n    navigator.clipboard.writeText(text).then(() => {\n      setCopiedIndex(index);\n      setTimeout(() => setCopiedIndex(null), 2000); // Reset after 2 seconds\n    });\n  };\n\n  const formatContent = (text) => {\n    try {\n      const codeBlockRegex = /```(\\w+)?\\n([\\s\\S]*?)```/g;\n      const boldTextRegex = /\\*\\*(.*?)\\*\\*/g;\n      const parts = [];\n      let lastIndex = 0;\n      let match;\n      let codeBlockIndex = 0;\n\n      // Handle code blocks\n      while ((match = codeBlockRegex.exec(text)) !== null) {\n        if (match.index > lastIndex) {\n          const nonCodeBlockText = text.slice(lastIndex, match.index);\n\n          // Handle bold text within non-code parts\n          const nonCodeWithBold = nonCodeBlockText.split(boldTextRegex).map((part, index) => {\n            if (index % 2 === 1) {\n              return <strong key={`bold-${index}`}>{part}</strong>;\n            }\n            return part;\n          });\n          parts.push(<div key={lastIndex}>{nonCodeWithBold}</div>);\n        }\n\n        const language = match[1] || 'text';\n        const code = match[2].trim();\n\n        const highlightedCode = Prism.languages[language]\n          ? Prism.highlight(code, Prism.languages[language], language)\n          : code;\n\n        const codeLines = highlightedCode.split('\\n').map((line, index) => (\n          <React.Fragment key={index}>\n            <LineNumber>{index + 1}</LineNumber>\n            <CodeContent dangerouslySetInnerHTML={{ __html: line }} />\n          </React.Fragment>\n        ));\n\n        parts.push(\n          <CodeBlockWrapper key={match.index}>\n            <CopyButton onClick={() => copyToClipboard(code, codeBlockIndex)}>\n              {copiedIndex === codeBlockIndex ? \"âœ… Copied\" : \"ðŸ“‹ Copy\"}\n            </CopyButton>\n            <CodeBlock>\n              {codeLines}\n            </CodeBlock>\n          </CodeBlockWrapper>\n        );\n\n        lastIndex = match.index + match[0].length;\n        codeBlockIndex++;\n      }\n\n      // Handle remaining non-code text\n      if (lastIndex < text.length) {\n        const remainingText = text.slice(lastIndex);\n        const remainingWithBold = remainingText.split(boldTextRegex).map((part, index) => {\n          if (index % 2 === 1) {\n            return <strong key={`bold-${index}`}>{part}</strong>;\n          }\n          return part;\n        });\n        parts.push(<div key={lastIndex + text.length}>{remainingWithBold}</div>);\n      }\n\n      return parts;\n    } catch (error) {\n      console.error('Error formatting content:', error);\n      return <div>{text}</div>;\n    }\n  };\n\n  return (\n    <MessageWrapper isUser={isUser}>\n      <Message isUser={isUser}>{formatContent(content)}</Message>\n    </MessageWrapper>\n  );\n});\n\nconst MessageList = ({ messages }) => {\n  const messagesEndRef = useRef(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    if (messages && messages.length) {\n      scrollToBottom();\n    }\n  }, [messages]);\n\n  if (!messages || !Array.isArray(messages)) {\n    console.error('Messages prop is invalid');\n    return null;\n  }\n\n  return (\n    <MessageListContainer>\n      {messages.map((message, index) => (\n        <MemoizedMessage\n          key={index}\n          content={message.content || 'Message content unavailable'}\n          isUser={message.role === 'user'}\n        />\n      ))}\n    </MessageListContainer>\n  );\n};\n\nexport default memo(MessageList);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}