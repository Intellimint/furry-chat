{"ast":null,"code":"var _jsxFileName = \"/Users/satoshinakamoto/Documents/intellimint-ai/intellimint-chat/intellimint-chat-new/src/components/ChatWindow.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport styled from 'styled-components';\nimport MessageList from './MessageList';\nimport MessageInput from './MessageInput';\nimport AIThinkingIndicator from './AIThinkingIndicator';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatWindowWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n`;\n_c = ChatWindowWrapper;\nconst MessagesWrapper = styled.div`\n  flex-grow: 1;\n  overflow-y: auto;\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  box-sizing: border-box;\n`;\n_c2 = MessagesWrapper;\nconst ChatWindow = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [sessionId, setSessionId] = useState(null);\n  const [isAiThinking, setIsAiThinking] = useState(false);\n  const messagesEndRef = useRef(null);\n  console.log('Rendering ChatWindow. isAiThinking:', isAiThinking);\n  const scrollToBottom = useCallback(() => {\n    var _messagesEndRef$curre;\n    console.log('Scrolling to bottom');\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, []);\n  const sendMessage = useCallback(async content => {\n    console.log('Sending message:', content);\n    try {\n      setMessages(prevMessages => {\n        console.log('Adding user message to state');\n        return [...prevMessages, {\n          role: 'user',\n          content\n        }];\n      });\n      setIsAiThinking(true);\n      console.log('Set isAiThinking to true');\n      const response = await axios.post('http://localhost:8000/chat', {\n        session_id: sessionId,\n        message: content\n      });\n      console.log('Received response from server:', response.data);\n      setIsAiThinking(false);\n      console.log('Set isAiThinking to false');\n      setMessages(prevMessages => {\n        console.log('Adding AI response to state');\n        return [...prevMessages, {\n          role: 'assistant',\n          content: response.data.message\n        }];\n      });\n      setSessionId(response.data.session_id);\n      console.log('Updated session ID:', response.data.session_id);\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setIsAiThinking(false);\n      console.log('Set isAiThinking to false due to error');\n      setMessages(prevMessages => {\n        console.log('Adding error message to state');\n        return [...prevMessages, {\n          role: 'assistant',\n          content: 'Error: Could not send message'\n        }];\n      });\n    }\n  }, [sessionId]);\n  useEffect(() => {\n    console.log('Messages or isAiThinking changed. Current state:', {\n      messagesCount: messages.length,\n      isAiThinking\n    });\n    scrollToBottom();\n  }, [messages, isAiThinking, scrollToBottom]);\n  useEffect(() => {\n    console.log('Initial render. Setting up chat window.');\n    // You can add any initial setup logic here\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ChatWindowWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(MessagesWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(MessageList, {\n        messages: messages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), isAiThinking && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(AIThinkingIndicator, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this), console.log('Rendering AI Thinking Indicator')]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n      onSendMessage: sendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatWindow, \"m7PAGj9N3atNAWXHYc9IYmi4BhM=\");\n_c3 = ChatWindow;\nexport default ChatWindow;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"ChatWindowWrapper\");\n$RefreshReg$(_c2, \"MessagesWrapper\");\n$RefreshReg$(_c3, \"ChatWindow\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","styled","MessageList","MessageInput","AIThinkingIndicator","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatWindowWrapper","div","props","theme","colors","background","text","_c","MessagesWrapper","_c2","ChatWindow","_s","messages","setMessages","sessionId","setSessionId","isAiThinking","setIsAiThinking","messagesEndRef","console","log","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","sendMessage","content","prevMessages","role","response","post","session_id","message","data","error","messagesCount","length","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","onSendMessage","_c3","$RefreshReg$"],"sources":["/Users/satoshinakamoto/Documents/intellimint-ai/intellimint-chat/intellimint-chat-new/src/components/ChatWindow.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport styled from 'styled-components';\nimport MessageList from './MessageList';\nimport MessageInput from './MessageInput';\nimport AIThinkingIndicator from './AIThinkingIndicator';\nimport axios from 'axios';\n\nconst ChatWindowWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n`;\n\nconst MessagesWrapper = styled.div`\n  flex-grow: 1;\n  overflow-y: auto;\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  box-sizing: border-box;\n`;\n\nconst ChatWindow = () => {\n  const [messages, setMessages] = useState([]);\n  const [sessionId, setSessionId] = useState(null);\n  const [isAiThinking, setIsAiThinking] = useState(false);\n  const messagesEndRef = useRef(null);\n\n  console.log('Rendering ChatWindow. isAiThinking:', isAiThinking);\n\n  const scrollToBottom = useCallback(() => {\n    console.log('Scrolling to bottom');\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, []);\n\n  const sendMessage = useCallback(async (content) => {\n    console.log('Sending message:', content);\n    try {\n      setMessages(prevMessages => {\n        console.log('Adding user message to state');\n        return [...prevMessages, { role: 'user', content }];\n      });\n      \n      setIsAiThinking(true);\n      console.log('Set isAiThinking to true');\n\n      const response = await axios.post('http://localhost:8000/chat', {\n        session_id: sessionId,\n        message: content\n      });\n      console.log('Received response from server:', response.data);\n\n      setIsAiThinking(false);\n      console.log('Set isAiThinking to false');\n\n      setMessages(prevMessages => {\n        console.log('Adding AI response to state');\n        return [...prevMessages, { role: 'assistant', content: response.data.message }];\n      });\n\n      setSessionId(response.data.session_id);\n      console.log('Updated session ID:', response.data.session_id);\n\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setIsAiThinking(false);\n      console.log('Set isAiThinking to false due to error');\n\n      setMessages(prevMessages => {\n        console.log('Adding error message to state');\n        return [...prevMessages, { role: 'assistant', content: 'Error: Could not send message' }];\n      });\n    }\n  }, [sessionId]);\n\n  useEffect(() => {\n    console.log('Messages or isAiThinking changed. Current state:', { messagesCount: messages.length, isAiThinking });\n    scrollToBottom();\n  }, [messages, isAiThinking, scrollToBottom]);\n\n  useEffect(() => {\n    console.log('Initial render. Setting up chat window.');\n    // You can add any initial setup logic here\n  }, []);\n\n  return (\n    <ChatWindowWrapper>\n      <MessagesWrapper>\n        <MessageList messages={messages} />\n        {isAiThinking && (\n          <>\n            <AIThinkingIndicator />\n            {console.log('Rendering AI Thinking Indicator')}\n          </>\n        )}\n        <div ref={messagesEndRef} />\n      </MessagesWrapper>\n      <MessageInput onSendMessage={sendMessage} />\n    </ChatWindowWrapper>\n  );\n};\n\nexport default ChatWindow;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}