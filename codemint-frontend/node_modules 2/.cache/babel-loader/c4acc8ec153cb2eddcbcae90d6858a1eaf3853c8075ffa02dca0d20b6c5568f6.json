{"ast":null,"code":"var _jsxFileName = \"/Users/satoshinakamoto/Documents/intellimint-ai/intellimint-chat/intellimint-chat-new/src/components/MessageList.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, memo } from 'react';\nimport styled from 'styled-components';\nimport MemoizedMessage from './MessageHelper'; // Import MemoizedMessage from MessageHelper\nimport SpinningLoader from './LoaderHelper'; // Import the loader component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageListContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: calc(100vh - 60px);\n  overflow-y: auto;\n  padding: 20px;\n  max-width: 100%;\n  box-sizing: border-box;\n`;\n_c = MessageListContainer;\nconst LoaderWrapper = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  margin-bottom: 10px;\n  width: 100%;\n`;\n_c2 = LoaderWrapper;\nconst MessageList = ({\n  messages,\n  isAiThinking\n}) => {\n  _s();\n  const messagesEndRef = useRef(null);\n\n  // Scroll to the bottom of the message list\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n\n  // Auto-scroll when new messages are added or AI is thinking\n  useEffect(() => {\n    if (messages && messages.length) {\n      scrollToBottom();\n    }\n  }, [messages, isAiThinking]);\n  if (!messages || !Array.isArray(messages)) {\n    console.error('Messages prop is invalid');\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(MessageListContainer, {\n    children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(MemoizedMessage, {\n      content: message.content || 'Message content unavailable',\n      isUser: message.role === 'user'\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)), isAiThinking && /*#__PURE__*/_jsxDEV(LoaderWrapper, {\n      children: /*#__PURE__*/_jsxDEV(SpinningLoader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: messagesEndRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(MessageList, \"0epSoi03NVSoD0I0FiLK4iVNXOA=\");\n_c3 = MessageList;\nexport default _c4 = /*#__PURE__*/memo(MessageList);\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"MessageListContainer\");\n$RefreshReg$(_c2, \"LoaderWrapper\");\n$RefreshReg$(_c3, \"MessageList\");\n$RefreshReg$(_c4, \"%default%\");","map":{"version":3,"names":["React","useRef","useEffect","memo","styled","MemoizedMessage","SpinningLoader","jsxDEV","_jsxDEV","MessageListContainer","div","_c","LoaderWrapper","_c2","MessageList","messages","isAiThinking","_s","messagesEndRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","length","Array","isArray","console","error","children","map","message","index","content","isUser","role","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c3","_c4","$RefreshReg$"],"sources":["/Users/satoshinakamoto/Documents/intellimint-ai/intellimint-chat/intellimint-chat-new/src/components/MessageList.js"],"sourcesContent":["import React, { useRef, useEffect, memo } from 'react';\nimport styled from 'styled-components';\nimport MemoizedMessage from './MessageHelper';  // Import MemoizedMessage from MessageHelper\nimport SpinningLoader from './LoaderHelper';    // Import the loader component\n\nconst MessageListContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: calc(100vh - 60px);\n  overflow-y: auto;\n  padding: 20px;\n  max-width: 100%;\n  box-sizing: border-box;\n`;\n\nconst LoaderWrapper = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  margin-bottom: 10px;\n  width: 100%;\n`;\n\nconst MessageList = ({ messages, isAiThinking }) => {\n  const messagesEndRef = useRef(null);\n\n  // Scroll to the bottom of the message list\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  // Auto-scroll when new messages are added or AI is thinking\n  useEffect(() => {\n    if (messages && messages.length) {\n      scrollToBottom();\n    }\n  }, [messages, isAiThinking]);\n\n  if (!messages || !Array.isArray(messages)) {\n    console.error('Messages prop is invalid');\n    return null;\n  }\n\n  return (\n    <MessageListContainer>\n      {messages.map((message, index) => (\n        <MemoizedMessage\n          key={index}\n          content={message.content || 'Message content unavailable'}\n          isUser={message.role === 'user'}\n        />\n      ))}\n\n      {/* Show the spinner if the AI is thinking */}\n      {isAiThinking && (\n        <LoaderWrapper>\n          <SpinningLoader />\n        </LoaderWrapper>\n      )}\n      \n      {/* Invisible div to ensure we scroll to the bottom */}\n      <div ref={messagesEndRef} />\n    </MessageListContainer>\n  );\n};\n\nexport default memo(MessageList);\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,EAAEC,IAAI,QAAQ,OAAO;AACtD,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAOC,eAAe,MAAM,iBAAiB,CAAC,CAAE;AAChD,OAAOC,cAAc,MAAM,gBAAgB,CAAC,CAAI;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEhD,MAAMC,oBAAoB,GAAGL,MAAM,CAACM,GAAG;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,EAAA,GARIF,oBAAoB;AAU1B,MAAMG,aAAa,GAAGR,MAAM,CAACM,GAAG;AAChC;AACA;AACA;AACA;AACA,CAAC;AAACG,GAAA,GALID,aAAa;AAOnB,MAAME,WAAW,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAa,CAAC,KAAK;EAAAC,EAAA;EAClD,MAAMC,cAAc,GAAGjB,MAAM,CAAC,IAAI,CAAC;;EAEnC;EACA,MAAMkB,cAAc,GAAGA,CAAA,KAAM;IAAA,IAAAC,qBAAA;IAC3B,CAAAA,qBAAA,GAAAF,cAAc,CAACG,OAAO,cAAAD,qBAAA,uBAAtBA,qBAAA,CAAwBE,cAAc,CAAC;MAAEC,QAAQ,EAAE;IAAS,CAAC,CAAC;EAChE,CAAC;;EAED;EACArB,SAAS,CAAC,MAAM;IACd,IAAIa,QAAQ,IAAIA,QAAQ,CAACS,MAAM,EAAE;MAC/BL,cAAc,CAAC,CAAC;IAClB;EACF,CAAC,EAAE,CAACJ,QAAQ,EAAEC,YAAY,CAAC,CAAC;EAE5B,IAAI,CAACD,QAAQ,IAAI,CAACU,KAAK,CAACC,OAAO,CAACX,QAAQ,CAAC,EAAE;IACzCY,OAAO,CAACC,KAAK,CAAC,0BAA0B,CAAC;IACzC,OAAO,IAAI;EACb;EAEA,oBACEpB,OAAA,CAACC,oBAAoB;IAAAoB,QAAA,GAClBd,QAAQ,CAACe,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,kBAC3BxB,OAAA,CAACH,eAAe;MAEd4B,OAAO,EAAEF,OAAO,CAACE,OAAO,IAAI,6BAA8B;MAC1DC,MAAM,EAAEH,OAAO,CAACI,IAAI,KAAK;IAAO,GAF3BH,KAAK;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGX,CACF,CAAC,EAGDvB,YAAY,iBACXR,OAAA,CAACI,aAAa;MAAAiB,QAAA,eACZrB,OAAA,CAACF,cAAc;QAAA8B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAChB,eAGD/B,OAAA;MAAKgC,GAAG,EAAEtB;IAAe;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAE3B,CAAC;AAACtB,EAAA,CAzCIH,WAAW;AAAA2B,GAAA,GAAX3B,WAAW;AA2CjB,eAAA4B,GAAA,gBAAevC,IAAI,CAACW,WAAW,CAAC;AAAC,IAAAH,EAAA,EAAAE,GAAA,EAAA4B,GAAA,EAAAC,GAAA;AAAAC,YAAA,CAAAhC,EAAA;AAAAgC,YAAA,CAAA9B,GAAA;AAAA8B,YAAA,CAAAF,GAAA;AAAAE,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}